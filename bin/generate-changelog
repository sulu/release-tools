#!/usr/bin/env php
<?php

use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\HttpClient\Exception\ClientException;
use Symfony\Component\HttpClient\Exception\ServerException;
use Symfony\Component\HttpClient\HttpClient;
use Symfony\Contracts\HttpClient\HttpClientInterface;

require __DIR__.'/../vendor/autoload.php';

function getClient(): HttpClientInterface
{
    /** @var string|null $githubToken */
    $githubToken = getenv('GITHUB_TOKEN') ?: null;

    $headers = [];
    if ($githubToken) {
        $headers[] = 'Authorization: Bearer ' . $githubToken;
    }

    return HttpClient::create([
        'headers' => $headers,
    ]);
}

function getChangelog(SymfonyStyle $ui, string $repository, $range): string
{
    /** @var string $futureVersion */
    $futureVersion = explode('...', $range)[1];
    $changelog = 'Release ' . $futureVersion . ' (' . date ('Y-m-d') . ')';

    $changelog .= PHP_EOL . PHP_EOL;

    $links = [];

    if ($releaseBlogUrl = $ui->ask(\sprintf('Release Blog Url: '))) {
        $links[] = '[Release Blog](' . $releaseBlogUrl . ')';
    }

    if (\in_array($repository, ['sulu/sulu', 'sulu/skeleton'])) {
        $links[] = '[Upgrade Guide](https://docs.sulu.io/en/latest/upgrades/upgrade-2.x.html)';
    }

    if (\in_array($repository, ['sulu/sulu', 'sulu/skeleton'])) {
        $links[] = '[Skeleton Adjustments](https://github.com/sulu/skeleton/compare/' . $range . ')';
    }

    if ('n' !== \strtolower($ui->ask(\sprintf('Has Breaking Changes?'), 'n'))) {
        $links[] = '[Breaking Changes](https://github.com/' . $repository . '/blob/' . $futureVersion . '/UPGRADE.md)';
    }

    $links[] = '[Full Changelog](https://github.com/' . $repository . '/compare/' . $range . ')';

    $changelog .= implode(' | ', $links);
    $changelog .= PHP_EOL . PHP_EOL;

    $lines = [];
    $contributors = [];
    foreach (getCommits($repository, $range) as $commit) {
        $message = \explode("\n", $commit['commit']['message'], 2)[0];

        if (0 === \strpos($message, 'Merge branch \'')
            || 0 === \strpos($message, 'Merge remote-tracking branch \'')
            || 0 === \strpos($message, 'Merge pull request  \'')
        ) {
            continue;
        }

        if (isset($commit['author']['login'])) {
            $contributor = '@' . $commit['author']['login'];
        } else {
            // no github account connect to commit email address
            $contributor = $commit['commit']['author']['name'];
        }

        $contributors[strtolower($contributor)] = $contributor;

        // replace #issue-number with sulu/sulu#issue-number so the changelog can also be used for sulu/skeleton
        $message = \str_replace('#', $repository . '#', $message);

        $lines[] = \sprintf(' - %s (%s)', $message, $contributor);
    }

    $lines = \array_reverse($lines);

    $changelog .= implode(PHP_EOL, $lines);

    if ('n' !== \strtolower($ui->ask(\sprintf('Show stats (merged pull requests, contributers)?'), 'n'))) {
        $client = getClient();

        $url = \sprintf(
            'https://api.github.com/orgs/%s/members',
            explode('/', $repository)[0],
        );

        $response = $client->request('GET', $url);

        if (200 !== $response->getStatusCode()) {
            throw new \RuntimeException(\sprintf('Could not load data from "%s".', $url));
        }

        $jsonString = $response->getContent();
        $members = \json_decode($jsonString, true);

        $coreContributers = [];
        foreach ($members as $member) {
            $username = '@' . $member['login'];
            if (isset($contributors[strtolower($username)])) {
                unset($contributors[strtolower($username)]);
                $coreContributers[strtolower($username)] = $username;
            }
        }

        \ksort($contributors);
        \ksort($coreContributers);

        $changelog .= PHP_EOL;
        $changelog .= PHP_EOL . 'Merged Pull Requests: ' . count($lines);
        $changelog .= PHP_EOL;
        $changelog .= PHP_EOL . 'External Contributers: ' . count($contributors);
        $changelog .= PHP_EOL;
        $changelog .= PHP_EOL;
        $changelog .= implode(PHP_EOL, $contributors);
        $changelog .= PHP_EOL;
        $changelog .= PHP_EOL . 'Core Contributers: ' . count($coreContributers);
        $changelog .= PHP_EOL;
        $changelog .= PHP_EOL;
        $changelog .= implode(PHP_EOL, $coreContributers);
        $changelog .= PHP_EOL;
        $changelog .= PHP_EOL . 'Contributers: ' . (count($contributors) + count($coreContributers));
    }

    return $changelog;
}

function getCommits($repository, $range): \Generator
{
    $client = getClient();

    $parameters = ['per_page' => '250'];
    $page = 1;

    do {
        $parameters['page'] = (string) $page++;

        $url = \sprintf(
            'https://api.github.com/repos/%s/compare/%s?%s',
            $repository,
            $range,
            http_build_query($parameters)
        );

        $response = $client->request('GET', $url);

        if (200 !== $response->getStatusCode()) {
            throw new \RuntimeException(\sprintf('Could not load data from "%s".', $url));
        }

        $jsonString = $response->getContent();
        $data = \json_decode($jsonString, true);
        $commits = $data['commits'];

        foreach ($commits as $commit) {
            yield $commit;
        }
    } while (250 === \count($commits));
}

(new SingleCommandApplication())
    ->setVersion('1.0.0')
    ->setName('Generate Script')
    ->addArgument('repository', InputArgument::REQUIRED)
    ->addArgument('range', InputArgument::REQUIRED)
    ->addOption('--dry-run', null, InputOption::VALUE_NONE)
    ->setCode(function (InputInterface $input, OutputInterface $output) {
        $ui = new SymfonyStyle($input, $output);
        $repository = $input->getArgument('repository');
        $range = $input->getArgument('range');

        $changelog = getChangelog($ui, $repository, $range);

        $output->writeln($changelog);
    })->run();
